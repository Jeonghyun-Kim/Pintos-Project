			+--------------------+
			|        IIT 3002    |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jeonghyun Kim <kimjh@bawi.org>
Byeongjoon Kim <bjkimp52014@gmail.com>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* This list holds sleeping threads. */
static struct list sleep_list; 

/* This sturct contains a sleeping thread and its remained sleep time. It will be inserted to sleep_list. */
struct sleep_info 
{
  struct list_elem elem;
  struct thread *thread_elem;
  int64_t time_remain;
};

/* This function updates remained sleep time of each threads in sleep_list, and wake up the thread of which 
remained sleep time is zero. */
void timer_wakeup (void)  
{
  struct list_elem *e;

  for (e = list_begin (&sleep_list); e != list_end (&sleep_list); e = list_next (e)) {
    struct sleep_info *l = list_entry (e, struct sleep_info, elem);

    if (l->time_remain > 0)
    {
      l->time_remain--;
    }

    if (l->time_remain == 0) {
      thread_unblock (l->thread_elem);
      list_remove (e);
    }
  }
}

/* list_init is added */
void timer_init (void)
{
  pit_configure_channel (0, 2, TIMER_FREQ);
  intr_register_ext (0x20, timer_interrupt, "8254 Timer");
  list_init (&sleep_list);
}

/* Several lines of code are added to push thread into sleep_list */
void timer_sleep (int64_t ticks)
{
  if (ticks <= 0)
    return;
  int64_t start = timer_ticks ();
  ASSERT (intr_get_level () == INTR_ON);

  struct sleep_info l;
  intr_disable ();
  l.thread_elem = thread_current ();
  l.time_remain = ticks;
  list_push_back (&sleep_list, &l.elem);
  thread_block ();
  intr_enable ();
}

/* timer_wakeup () is added */
static void timer_interrupt (struct intr_frame *args UNUSED)
{
  ticks++;
  timer_wakeup ();
  thread_tick ();
}

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

A thread is pushed into sleep_list with the target sleep time(ticks), and blocked. 
Here, the busy waiting (while loop) part is deleted.
Instead, timer_interrupt calls to the function timer_wakeup () as mentioned before.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

We updates and unblocks, if the time has passed, the treads in the sleep_list checking all the elements using for loop. 
We think this is the minimum overhead.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

We didn't think about that side(TEST codes don't include that problem),
but using mutual exclusion to make critical section will solve it.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

'Interrupt Disable' is already applied to timer_sleep().
There will not be a timer interrupt inside the critical section in timer_sleep().


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

This is 'Simple' and 'Powerful' solution for avoiding busy waiting of timer.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

1. thread.c

(1)
tid_t
thread_create (const char *name, int priority,
               thread_func *function, void *aux)
{
  struct thread *t;
  struct kernel_thread_frame *kf;
  struct switch_entry_frame *ef;
  struct switch_threads_frame *sf;
  tid_t tid;
  enum intr_level old_level;

  ASSERT (function != NULL);

  /* Allocate thread. */
  t = palloc_get_page (PAL_ZERO);
  if (t == NULL)
    return TID_ERROR;

  /* Initialize thread. */
  init_thread (t, name, priority);
  tid = t->tid = allocate_tid ();

  /* Prepare thread for first run by initializing its stack.
     Do this atomically so intermediate values for the 'stack'
     member cannot be observed. */
  old_level = intr_disable ();

  /* Stack frame for kernel_thread(). */
  kf = alloc_frame (t, sizeof *kf);
  kf->eip = NULL;
  kf->function = function;
  kf->aux = aux;

  /* Stack frame for switch_entry(). */
  ef = alloc_frame (t, sizeof *ef);
  ef->eip = (void (*) (void)) kernel_thread;

  /* Stack frame for switch_threads(). */
  sf = alloc_frame (t, sizeof *sf);
  sf->eip = switch_entry;
  sf->ebp = 0;

  intr_set_level (old_level);

  /* Add to run queue. */
  thread_unblock (t);

  /***************** Schedule ME - added *****************/
  thread_yield ();

  return tid;
}

(2)
void
thread_set_priority (int new_priority)
{
  thread_current ()->priority = new_priority;
  
  /***************** Schedule ME - added *****************/
  thread_yield ();
}

(3)
 - Newly Defined Function -
 bool
 compare_priority (const struct list_elem *a, const struct list_elem *b, void *aux)
 {
   struct thread *thread1 = list_entry (a, struct thread, elem);
   struct thread *thread2 = list_entry (b, struct thread, elem);
   if (thread1->priority > thread2->priority) {
     return true;
   }
   else {
     return false;
   }
 }
 
 (4)
 static struct thread *
 next_thread_to_run (void)
 {
   if (list_empty (&ready_list)) {
     return idle_thread;
   }
   else {
     /***************** Sorting Before Pop Front from The Ready List *****************/
     list_sort (&ready_list, compare_priority, NULL);
     return list_entry (list_pop_front (&ready_list), struct thread, elem);
   }
 }
 
2. thread.h
 
(1)
// Newly Defined Function Added to Header File.
bool compare_priority (const struct list_elem *a, const struct list_elem *b, void *aux);
 
3. synch.c
 
(1)
void
sema_up (struct semaphore *sema) 
{
  enum intr_level old_level;

  ASSERT (sema != NULL);

  old_level = intr_disable ();
  if (!list_empty (&sema->waiters)) {
  
    /***************** Sorting Waiters *****************/
    list_sort (&sema->waiters, compare_priority, NULL);
    
    thread_unblock (list_entry (list_pop_front (&sema->waiters), struct thread, elem));
  }

  sema->value++;
  intr_set_level (old_level);
  
  /***************** Schedule ME - added *****************/
  thread_yield ();
}

(2)
struct semaphore_elem 
  {
    struct list_elem elem;              /* List element. */
    struct semaphore semaphore;         /* This semaphore. */
    int priority;                       /* This is priority of thread  - added */
  };
  
(3)
/***************** New Function for Semaphore *****************/
/* it compared the priority of semaphores */
bool
compare_semaphore (const struct list_elem *a, const struct list_elem *b, void *aux)
{
  struct semaphore_elem *sema1 = list_entry (a, struct semaphore_elem, elem);
  struct semaphore_elem *sema2 = list_entry (b, struct semaphore_elem, elem);
  if (sema1->priority > sema2->priority) {
    return true;
  }
  else {
    return false;
  }
}

(4)
void
cond_wait (struct condition *cond, struct lock *lock) 
{
  struct semaphore_elem waiter;

  ASSERT (cond != NULL);
  ASSERT (lock != NULL);
  ASSERT (!intr_context ());
  ASSERT (lock_held_by_current_thread (lock));
  
  sema_init (&waiter.semaphore, 0);
  
  /***************** Saving Waiting Thread Priority *****************/
  waiter.priority = thread_get_priority ();
  
  list_push_back (&cond->waiters, &waiter.elem);
  
  /***************** Sorting Waiters *****************/
  list_sort (&cond->waiters, compare_semaphore, NULL);
  
  lock_release (lock);
  sema_down (&waiter.semaphore);
  lock_acquire (lock);
}


>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

We tried to solve 'priority inversion' problem by using donation technique
(you can see our effort in lots of commits over several branches.)
(T.T)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

A lock and a condition variable use semaphore, so we modified a semaphore.
The list of threads waiting for a semaphore is sorted according to each thread's priority 
to ensure the highest priority thread wakes up first.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

We didn's avoid race condition. We don't know how to perform that.


---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

This is 'Simple' and 'Powerful' solution for priority scheduling.
We tried to solve 'priority inversion' problem by using donation technique
(you can see our effort in lots of commits over several branches.)
(T.T)


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

We don't have much time for the project because of the tight OS lectures.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

We realized that even the smallest part of the OS had to be delicately designed.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

It looks very difficult. Students have to try digging on
the structure of the Operating Systems.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

We love our TA, Thank you Jie~! <3

>> Any other comments?

We love our TA, Thank you Jie~! <3
